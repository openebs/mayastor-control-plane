openapi: 3.0.3
info:
  title: IoEngine RESTful API
  version: v0
servers:
  - url: /v0
paths:
  /nexuses:
    get:
      tags:
        - Nexuses
      operationId: get_nexuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}':
    get:
      tags:
        - Nexuses
      operationId: get_nexus
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Nexuses
      operationId: del_nexus
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}/children':
    get:
      tags:
        - Children
      operationId: get_nexus_children
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}/children/{child_id}':
    get:
      tags:
        - Children
      operationId: get_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Children
      operationId: put_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Children
      operationId: del_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /nodes:
    get:
      tags:
        - Nodes
      operationId: get_nodes
      parameters:
        - in: query
          name: node_id
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}':
    get:
      tags:
        - Nodes
      operationId: get_node
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/cordon/{label}':
    put:
      tags:
        - Nodes
      operationId: put_node_cordon
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: label
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Nodes
      operationId: delete_node_cordon
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: label
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/drain/{label}':
    put:
      tags:
        - Nodes
      operationId: put_node_drain
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: label
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/label/{key}={value}':
    put:
      tags:
        - Nodes
      operationId: put_node_label
      description: |-
        Add labels to node.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: io-engine-1
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: |-
            The key of the label to be added.
        - in: path
          name: value
          required: true
          schema:
            type: string
          description: |-
            The value of the label to be added.
        - in: query
          name: overwrite
          description: |-
            Overwrite existing label if the label key exists.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/label/{key}':
    delete:
      tags:
        - Nodes
      operationId: delete_node_label
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: io-engine-1
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: |-
            The key of the label to be removed.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/nexuses':
    get:
      tags:
        - Nexuses
      operationId: get_node_nexuses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/pools':
    get:
      tags:
        - Pools
      operationId: get_node_pools
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/replicas':
    get:
      tags:
        - Replicas
      operationId: get_node_replicas
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}':
    get:
      tags:
        - Nexuses
      operationId: get_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Nexuses
      operationId: put_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNexusBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Nexuses
      operationId: del_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/children':
    get:
      tags:
        - Children
      operationId: get_node_nexus_children
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/children/{child_id}':
    get:
      tags:
        - Children
      operationId: get_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Children
      operationId: put_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Children
      operationId: del_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/share':
    delete:
      tags:
        - Nexuses
      operationId: del_node_nexus_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/share/{protocol}':
    put:
      tags:
        - Nexuses
      operationId: put_node_nexus_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/NexusShareProtocol'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}':
    get:
      tags:
        - Pools
      operationId: get_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Pools
      operationId: put_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePoolBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Pools
      operationId: del_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas':
    get:
      tags:
        - Replicas
      operationId: get_node_pool_replicas
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}':
    get:
      tags:
        - Replicas
      operationId: get_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Replicas
      operationId: put_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplicaBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Replicas
      operationId: del_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share':
    delete:
      tags:
        - Replicas
      operationId: del_node_pool_replica_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share/nvmf':
    put:
      tags:
        - Replicas
      operationId: put_node_pool_replica_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: allowed-hosts
          description: NQNs of hosts allowed to connect to this replica
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/HostNqn'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node}/block_devices':
    get:
      tags:
        - BlockDevices
      operationId: get_node_block_devices
      parameters:
        - in: query
          name: all
          description: specifies whether to list all devices or only usable ones
          schema:
            type: boolean
        - in: path
          name: node
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockDevice'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node}/jsongrpc/{method}':
    put:
      tags:
        - JsonGrpc
      operationId: put_node_jsongrpc
      parameters:
        - in: path
          name: node
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: method
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonGeneric'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonGeneric'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /pools:
    get:
      tags:
        - Pools
      operationId: get_pools
      parameters:
        - in: query
          name: volume_id
          required: false
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}':
    get:
      tags:
        - Pools
      operationId: get_pool
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Pools
      operationId: del_pool
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}':
    put:
      tags:
        - Replicas
      operationId: put_pool_replica
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplicaBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Replicas
      operationId: del_pool_replica
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}/share':
    delete:
      tags:
        - Replicas
      operationId: del_pool_replica_share
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}/share/nvmf':
    put:
      tags:
        - Replicas
      operationId: put_pool_replica_share
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: allowed-hosts
          required: false
          description: NQNs of hosts allowed to connect to this replica
          schema:
            type: array
            items:
              $ref: '#/components/schemas/HostNqn'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/label/{key}={value}':
    put:
      tags:
        - Pools
      operationId: put_pool_label
      description: |-
        Add labels to pool.
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: |-
            The key of the label to be added.
        - in: path
          name: value
          required: true
          schema:
            type: string
          description: |-
            The value of the label to be added.
        - in: query
          name: overwrite
          description: |-
            Overwrite existing label if the label key exists.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{id}/label/{key}':
    delete:
      tags:
        - Pools
      operationId: del_pool_label
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: |-
            The key of the label to be removed.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /replicas:
    get:
      tags:
        - Replicas
      operationId: get_replicas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/replicas/{id}':
    get:
      tags:
        - Replicas
      operationId: get_replica
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /specs:
    get:
      tags:
        - Specs
      operationId: get_specs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specs'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /volumes:
    get:
      tags:
        - Volumes
      operationId: get_volumes
      parameters:
        - in: query
          name: volume_id
          description: |-
            The uuid of a volume to retrieve.
            This can be used to "bypass" the 404 error when a volume does not exist.
          schema:
            $ref: '#/components/schemas/VolumeId'
          required: false
        - in: query
          name: max_entries
          description: the maximum number of results to return
          schema:
            type: integer
            default: 0
          required: true
        - in: query
          name: starting_token
          description: the offset to start pagination from
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Volumes'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}':
    get:
      tags:
        - Volumes
      operationId: get_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Volumes
      operationId: put_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVolumeBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Volumes
      operationId: del_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/rebuild-history':
    get:
      tags:
        - Volumes
      operationId: get_rebuild_history
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildHistory'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: [ ]
  '/volumes/{volume_id}/replica_count/{replica_count}':
    put:
      tags:
        - Volumes
      operationId: put_volume_replica_count
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: replica_count
          required: true
          schema:
            type: integer
            format: uint8
            minimum: 1
            maximum: 255
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/property':
    put:
      tags:
        - Volumes
      operationId: put_volume_property
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetVolumePropertyBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/target':
    put:
      tags:
        - Volumes
      operationId: put_volume_target
      description: |-
        Create a volume target connectable for front-end IO from the specified node.
        Due to a limitation, this must currently be an io-engine storage node.
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishVolumeBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Volumes
      operationId: del_volume_target
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: force
          description: |-
            Force unpublish if the node is not online. This should only be used when it is safe to do so, eg: when the node is not coming back up.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/size':
    put:
      tags:
        - Volumes
      operationId: put_volume_size
      description: |-
        Resize a volume to required size.
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResizeVolumeBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/shutdown_targets':
    delete:
      tags:
        - Volumes
      operationId: del_volume_shutdown_targets
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/share/{protocol}':
    put:
      tags:
        - Volumes
      operationId: put_volume_share
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/VolumeShareProtocol'
        - in: query
          name: frontend_host
          x-api-scope: internal
          description: |-
            Host if specified, is allowed to connect the target.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes{volume_id}/share':
    delete:
      tags:
        - Volumes
      operationId: del_share
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/snapshots/{snapshot_id}':
    get:
      tags:
        - Snapshots
      operationId: get_volume_snapshot
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshot'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Snapshots
      operationId: put_volume_snapshot
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshot'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Snapshots
      operationId: del_volume_snapshot
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/snapshots':
    get:
      tags:
        - Snapshots
      operationId: get_volume_snapshots
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: max_entries
          description: the maximum number of results to return
          schema:
            type: integer
            default: 0
          required: true
        - in: query
          name: starting_token
          description: the offset to start pagination from
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshots'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/snapshots/{snapshot_id}':
    get:
      tags:
        - Snapshots
      operationId: get_volumes_snapshot
      parameters:
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshot'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Snapshots
      operationId: del_snapshot
      parameters:
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/snapshots':
    get:
      tags:
        - Snapshots
      operationId: get_volumes_snapshots
      parameters:
        - in: query
          name: snapshot_id
          description: The uuid of the snapshot to retrieve.
          schema:
            $ref: '#/components/schemas/SnapshotId'
          required: false
        - in: query
          name: volume_id
          description: The uuid of the snapshots source volume.
          schema:
            $ref: '#/components/schemas/VolumeId'
          required: false
        - in: query
          name: max_entries
          description: the maximum number of results to return
          schema:
            type: integer
            default: 0
          required: true
        - in: query
          name: starting_token
          description: the offset to start pagination from
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSnapshots'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/snapshots/{snapshot_id}/volumes/{volume_id}':
    put:
      tags:
        - Volumes
      operationId: put_snapshot_volume
      parameters:
        - in: path
          name: snapshot_id
          required: true
          schema:
            $ref: '#/components/schemas/SnapshotId'
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVolumeBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: [ ]
  '/watches/volumes/{volume_id}':
    get:
      tags:
        - Watches
      operationId: get_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestWatch'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Watches
      operationId: put_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: callback
          description: URL callback
          required: true
          schema:
            type: string
            format: uri
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Watches
      operationId: del_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: callback
          description: URL callback
          required: true
          schema:
            type: string
            format: uri
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /app-nodes:
    get:
      tags:
        - AppNodes
      operationId: get_app_nodes
      parameters:
        - in: query
          name: max_entries
          description: The maximum number of results to return.
          schema:
            type: integer
            default: 0
          required: true
        - in: query
          name: starting_token
          description: The offset to start pagination from.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppNodes'
        '4XX':
          $ref: '#/components/responses/ClientError'
          '5XX':
            $ref: '#/components/responses/ServerError'
      security:
        - JWT: [ ]
  '/app-nodes/{app_node_id}':
    put:
      tags:
        - AppNodes
      operationId: register_app_node
      parameters:
        - in: path
          name: app_node_id
          required: true
          schema:
            $ref: '#/components/schemas/AppNodeId'
      requestBody:
        description: Contents of the app node to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAppNode'
        required: true
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - AppNodes
      operationId: deregister_app_node
      parameters:
        - name: app_node_id
          in: path
          description: ID of the app node to be deregistered.
          required: true
          schema:
            $ref: '#/components/schemas/AppNodeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    get:
      tags:
        - AppNodes
      operationId: get_app_node
      parameters:
        - name: app_node_id
          in: path
          description: Id of the app node.
          required: true
          schema:
            $ref: '#/components/schemas/AppNodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppNode'
        '4XX':
          $ref: '#/components/responses/ClientError'
          '5XX':
            $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    VolumeId:
      example: ec4e66fd-3b33-4439-b504-d49aba53da26
      type: string
      format: uuid
    SnapshotId:
      example: 25823425-41fa-434a-9efd-a356b70b5d7c
      type: string
      format: uuid
    ReplicaId:
      example: bcf680de-4714-4c4a-aa6e-1e23fa3e87fe
      type: string
      format: uuid
    NodeId:
      description: storage node identifier
      example: io-engine-1
      type: string
    AppNodeId:
      description: App node identifier.
      example: csi-node-1
      type: string
    PoolId:
      description: storage pool identifier
      example: pool-1
      type: string
    PoolUuid:
      description: storage pool unique identifier
      example: 22ca10d3-4f2b-4b95-9814-9181c025cc1a
      type: string
      format: uuid
    BlockDevice:
      description: Block device information
      type: object
      properties:
        available:
          description: |-
            identifies if device is available for use (ie. is not "currently" in
             use)
          type: boolean
        connection_type:
          description: the type of bus through which the device is connected to the system
          type: string
        devlinks:
          description: list of udev generated symlinks by which device may be identified
          type: array
          items:
            type: string
        devmajor:
          description: major device number
          type: integer
          format: int32
        devminor:
          description: minor device number
          type: integer
          format: int32
        devname:
          description: entry in /dev associated with device
          type: string
        devpath:
          description: official device path
          type: string
        devtype:
          description: currently "disk" or "partition"
          type: string
        filesystem:
          example:
            fstype: ''
            label: ''
            mountpoint: ''
            uuid: ''
          description: filesystem information in case where a filesystem is present
          type: object
          properties:
            fstype:
              description: 'filesystem type: ext3, ntfs, ...'
              type: string
            label:
              description: volume label
              type: string
            mountpoint:
              description: path where filesystem is currently mounted
              type: string
            uuid:
              description: UUID identifying the volume (filesystem)
              type: string
          required:
            - fstype
            - label
            - mountpoint
            - uuid
        is_rotational:
          description: indicates whether the device is rotational or non-rotational
          type: boolean
        model:
          description: device model - useful for identifying devices
          type: string
        partition:
          description: partition information in case where device represents a partition
          type: object
          properties:
            name:
              description: partition name
              type: string
            number:
              description: partition number
              type: integer
              format: int32
            parent:
              description: devname of parent device to which this partition belongs
              type: string
            scheme:
              description: 'partition scheme: gpt, dos, ...'
              type: string
            typeid:
              description: partition type identifier
              type: string
            uuid:
              description: UUID identifying partition
              type: string
          required:
            - name
            - number
            - parent
            - scheme
            - typeid
            - uuid
        size:
          description: size of device in (512 byte) blocks
          type: integer
          format: int64
          minimum: 0
      required:
        - available
        - connection_type
        - devlinks
        - devmajor
        - devminor
        - devname
        - devpath
        - devtype
        - model
        - size
    ChildState:
      example: Online
      description: State of a Nexus Child
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    ChildStateReason:
      example: OutOfSpace
      description: Reason for the state of a Nexus Child
      type: string
      enum:
        - OutOfSpace
    Child:
      example:
        rebuildProgress: null
        state: Online
        uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:37d83441-e8ef-4e17-a29e-25169d91cb96'
      description: Child information
      type: object
      properties:
        rebuildProgress:
          description: current rebuild progress (%)
          type: integer
          minimum: 0
          maximum: 100
        state:
          $ref: '#/components/schemas/ChildState'
        state_reason:
          $ref: '#/components/schemas/ChildStateReason'
        uri:
          description: uri of the child device
          type: string
      required:
        - state
        - uri
    CreateNexusBody:
      example:
        children:
          - 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:37d83441-e8ef-4e17-a29e-25169d91cb96'
        size: 80241024
      description: Create Nexus Body
      type: object
      properties:
        children:
          description: |-
            replica can be iscsi and nvmf remote targets or a local spdk bdev
             (i.e. bdev:///name-of-the-bdev).

             uris to the targets we connect to
          type: array
          items:
            type: string
        size:
          description: size of the device in bytes
          type: integer
          format: int64
          minimum: 0
      required:
        - children
        - size
    CreatePoolBody:
      example:
        disks:
          - 'malloc:///disk?size_mb=100'
      description: Create Pool Body
      type: object
      properties:
        disks:
          description: disk device paths or URIs to be claimed by the pool
          type: array
          items:
            example: 'malloc:///disk?size_mb=100'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        labels:
          description: labels to be set on the pools
          type: object
          additionalProperties:
            type: string
      required:
        - disks
    HostNqn:
      example: nqn.2014-08.org.nvmexpress:uuid:804b1e8c-b42d-4d15-92b4-7c4e4d0f507
      description: |-
        NVMe Qualified Names (NQNs) are used to uniquely describe a host or NVM subsystem for the purposes
        of identification and authentication
      type: string
    CreateReplicaBody:
      example:
        size: 80241024
        thin: false
      description: Create Replica Body
      type: object
      properties:
        share:
          $ref: '#/components/schemas/ReplicaShareProtocol'
        allowed-hosts:
          type: array
          items:
            $ref: '#/components/schemas/HostNqn'
        size:
          description: size of the replica in bytes
          type: integer
          format: int64
          minimum: 0
        thin:
          description: thin provisioning
          type: boolean
      required:
        - size
        - thin
    PoolTopology:
      example:
        explicit: null
        labelled: null
      description: |-
        Used to determine how to place/distribute the data during volume creation and replica replacement.
         If left empty then the control plane will select from all available resources.
      type: object
      properties:
        labelled:
          description: volume pool topology definition through labels
          allOf:
            - $ref: '#/components/schemas/LabelledTopology'
      additionalProperties: false
      oneOf:
        - required:
            - labelled
    ExplicitNodeTopology:
      example:
        allowed_nodes:
          - ''
        preferred_nodes:
          - ''
      description: 'volume topology, explicitly selected'
      type: object
      properties:
        allowed_nodes:
          description: replicas can only be placed on these nodes
          type: array
          items:
            type: string
        preferred_nodes:
          description: preferred nodes to place the replicas
          type: array
          items:
            type: string
      required:
        - allowed_nodes
        - preferred_nodes
    LabelledTopology:
      example:
        exclusion:
          - ''
        inclusion:
          - ''
        affinitykey:
          - ''
      description: labelled topology
      type: object
      properties:
        exclusion:
          example: ''
          description: |-
            Excludes resources with the same $label name, eg:
             "Zone" would not allow for resources with the same "Zone" value
             to be used for a certain operation, eg:
             A node with "Zone: A" would not be paired up with a node with "Zone: A",
             but it could be paired up with a node with "Zone: B"
             exclusive label NAME in the form "NAME", and not "NAME: VALUE"
          type: object
          additionalProperties:
            type: string
        inclusion:
          example: ''
          description: |-
            Includes resources with the same $label or $label:$value eg:
             if label is "Zone: A":
             A resource with "Zone: A" would be paired up with a resource with "Zone: A",
             but not with a resource with "Zone: B"
             if label is "Zone":
             A resource with "Zone: A" would be paired up with a resource with "Zone: B",
             but not with a resource with "OtherLabel: B"
             inclusive label key value in the form "NAME: VALUE"
          type: object
          additionalProperties:
            type: string
        affinitykey:
          example: ''
          description: |-
            This feature includes resources with identical $label keys. For example,
             if the affinity key is set to "Zone":
             Initially, a resource that matches the label is selected, example "Zone: A".
             Subsequently, all other resources must match the given label "Zone: A",
             effectively adding this requirement as an inclusion label.
          type: array
          items:
            example: 'Zone'
            type: string
      required:
        - exclusion
        - inclusion
        - affinitykey
    Topology:
      description: node and pool topology for volumes
      type: object
      properties:
        node_topology:
          $ref: '#/components/schemas/NodeTopology'
        pool_topology:
          $ref: '#/components/schemas/PoolTopology'
    NodeTopology:
      example:
        explicit: null
        labelled: null
      description: |-
        Used to determine how to place/distribute the data during volume creation and replica replacement.
         If left empty then the control plane will select from all available resources.
      type: object
      properties:
        explicit:
          description: volume topology, explicitly selected
          allOf:
            - $ref: '#/components/schemas/ExplicitNodeTopology'
        labelled:
          description: volume topology definition through labels
          allOf:
            - $ref: '#/components/schemas/LabelledTopology'
      additionalProperties: false
      oneOf:
        - required:
            - explicit
        - required:
            - labelled
    VolumePolicy:
      example:
        self_heal: true
      description: Volume policy used to determine if and how to replace a replica
      type: object
      properties:
        self_heal:
          description: If true the control plane will attempt to heal the volume by itself
          type: boolean
      required:
        - self_heal
    CreateVolumeBody:
      example:
        policy:
          self_heal: true
        replicas: 1
        size: 10485761
        thin: false
        topology: null
        affinity_group: null
        max_snapshots: 10
      description: Create Volume Body
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/VolumePolicy'
        replicas:
          description: number of storage replicas
          type: integer
          format: uint8
          minimum: 0
          maximum: 255
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        thin:
          description: flag indicating whether or not the volume is thin provisioned
          type: boolean
        topology:
          $ref: '#/components/schemas/Topology'
        labels:
          description: Optionally used to store custom volume information
          type: object
          additionalProperties:
            type: string
        affinity_group:
          description: Affinity Group related information.
          allOf:
            - $ref: '#/components/schemas/AffinityGroup'
        max_snapshots:
          description: Max Snapshots limit per volume.
          type: integer
          format: int32
          minimum: 0
      required:
        - policy
        - replicas
        - size
        - thin
    SetVolumePropertyBody:
      example:
        max_snapshots: 10
      description: Set Volume Properties Body
      type: object
      oneOf:
        - required:
          - max_snapshots
      properties:
        max_snapshots:
          description: Max Snapshots limit per volume.
          type: integer
          format: int32
          minimum: 0
    AffinityGroup:
      example:
        id: "ag"
      description: Affinity Group related information.
      type: object
      properties:
        id:
          description: Identification of the Affinity Group.
          type: string
      required:
        - id
    VolumeContentSource:
      description: Volume Content Source i.e the snapshot or the volume.
      type: object
      properties:
        snapshot:
          $ref: '#/components/schemas/SnapshotAsSource'
      additionalProperties: false
      oneOf:
        - required:
            - snapshot
    SnapshotAsSource:
      description: The snapshot source for the volume content.
      type: object
      properties:
        snapshot:
          $ref: '#/components/schemas/SnapshotId'
        volume:
          $ref: '#/components/schemas/VolumeId'
      required:
        - snapshot
        - volume
    ResizeVolumeBody:
      example:
        size: 104857610
      description: Resize Volume Body
      type: object
      properties:
        size:
          description: New required size of the volume in bytes
          type: integer
          format: uint64
          minimum: 0
      required:
        - size
    PublishVolumeBody:
      example:
        node: "io-engine-1"
        protocol: "nvmf"
        publish_context:
          io_timeout: "30"
          ctrl_loss_timeout: "1980"
        republish: false
        reuse_existing: true
      description: Publish Volume Body
      type: object
      properties:
        publish_context:
          description: Controller Volume Publish context
          type: object
          additionalProperties:
            type: string
        reuse_existing:
          description: Allows reusing of the current target.
          type: boolean
        node:
          description: |-
            The node where the target will reside in.
            It may be moved elsewhere during volume republish.
          allOf:
            - $ref: '#/components/schemas/NodeId'
        protocol:
          description: The protocol used to connect to the front-end node.
          allOf:
            - $ref: '#/components/schemas/VolumeShareProtocol'
        republish:
          description: |-
            Allows republishing the volume on the node by shutting down the existing target first.
          type: boolean
        frontend_node:
          description: |-
            The node where the front-end workload resides.
            If the workload moves then the volume must be republished.
          type: string
      required:
        - publish_context
        - protocol
    JsonGeneric:
      description: 'Generic JSON value eg: { "size": 1024 }'
      type: object
    NexusState:
      description: State of the Nexus
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
        - ShuttingDown
        - Shutdown
    RebuildJobState:
      description: State of the rebuild job
      type: string
      enum:
        - Init
        - Rebuilding
        - Stopped
        - Paused
        - Failed
        - Completed
    RebuildRecord:
      example:
        - childUri: 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:37d83441-e8ef-4e17-a29e-25169d91cb96'
          srcUri: 'nvmf://10.1.0.9:8420/nqn.2019-05.com.org:37d83441-e8ef-4e17-a29e-25169d91cb25'
          state: Completed
          blocksTotal: 13452
          blocksRecovered: 13452
          blocksTransferred: 12343
          blocksRemaining: 0
          blockSize: 512
          isPartial: true
          startTime: "2023-06-20T07:25:25.974218428Z"
          endTime: "2023-06-20T07:25:25.975338717Z"
      description: Rebuild record of a Child
      type: object
      properties:
        childUri:
          description: Uri of the rebuilding child
          type: string
        srcUri:
          description: Uri of source child for rebuild job
          type: string
        rebuildJobState:
          $ref: '#/components/schemas/RebuildJobState'
        blocksTotal:
          description: Total blocks to rebuild
          type: integer
          format: uint64
        blocksRecovered:
          description: Number of blocks processed
          type: integer
          format: uint64
        blocksTransferred:
          description: Number of blocks to transferred
          type: integer
          format: uint64
        blocksRemaining:
          description: Number of blocks remaining
          type: integer
          format: uint64
        blockSize:
          description: Size of each block in the task
          type: integer
          format: uint64
        isPartial:
          description: True means its Partial rebuild job. If false, its Full rebuild job
          type: boolean
        startTime:
          description: Start time of the rebuild job (UTC)
          type: string
          format: date-time
        endTime:
          description: End time of the rebuild job (UTC)
          type: string
          format: date-time
      required:
        - childUri
        - srcUri
        - rebuildJobState
        - blocksTotal
        - blocksRecovered
        - blocksTransferred
        - blocksRemaining
        - blockSize
        - isPartial
        - startTime
        - endTime
    RebuildHistory:
      properties:
        targetUuid:
          description: Id of the volume target
          type: string
          format: uuid
        records:
          description: Array of rebuild record
          type: array
          items:
            $ref: '#/components/schemas/RebuildRecord'
      required:
        - targetUuid
        - records
    Nexus:
      example:
        children:
          - rebuildProgress: null
            state: Online
            uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:replica1'
        deviceUri: null
        node: io-engine-1
        rebuilds: 0
        protocol: nvmf
        size: 8024024
        state: Online
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
      description: Nexus information
      type: object
      properties:
        children:
          description: Array of Nexus Children
          type: array
          items:
            $ref: '#/components/schemas/Child'
        deviceUri:
          description: |-
            URI of the device for the volume (missing if not published).
             Missing property and empty string are treated the same.
          type: string
        node:
          description: id of the io-engine instance
          type: string
        rebuilds:
          description: total number of rebuild tasks
          type: integer
          format: int32
          minimum: 0
        protocol:
          $ref: '#/components/schemas/Protocol'
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        state:
          $ref: '#/components/schemas/NexusState'
        uuid:
          description: uuid of the nexus
          type: string
          format: uuid
      required:
        - children
        - deviceUri
        - node
        - rebuilds
        - protocol
        - size
        - state
        - uuid
    NodeStatus:
      description: deemed state of the node
      type: string
      enum:
        - Unknown
        - Online
        - Offline
    NodeSpec:
      example:
        grpcEndpoint: '10.1.0.5:10124'
        id: io-engine-1
      description: Node spec
      type: object
      properties:
        grpcEndpoint:
          description: gRPC endpoint of the io-engine instance
          type: string
        id:
          description: node ID
          $ref: '#/components/schemas/NodeId'
        labels:
          description: labels to be set on the node
          type: object
          additionalProperties:
            type: string
        cordondrainstate:
          description: the drain state
          allOf:
            - $ref: '#/components/schemas/CordonDrainState'
        node_nqn:
          $ref: '#/components/schemas/HostNqn'
        version:
          description: Version of the io-engine instance
          type: string
      additionalProperties: false
      required:
        - grpcEndpoint
        - id
    NodeState:
      example:
        grpcEndpoint: '10.1.0.5:10124'
        id: io-engine-1
        status: Online
      description: io-engine storage node information
      type: object
      properties:
        grpcEndpoint:
          description: gRPC endpoint of the io-engine instance
          type: string
        id:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/NodeStatus'
        node_nqn:
          $ref: '#/components/schemas/HostNqn'
        version:
          description: Version of the io-engine instance
          type: string
      required:
        - grpcEndpoint
        - id
        - status
    Node:
      description: io-engine storage node information
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NodeId'
        spec:
          $ref: '#/components/schemas/NodeSpec'
        state:
          $ref: '#/components/schemas/NodeState'
      required:
        - id
    PoolStatus:
      description: current status of the pool
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    Pool:
      description: Pool object, comprised of a spec and a state
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PoolId'
        spec:
          $ref: '#/components/schemas/PoolSpec'
        state:
          $ref: '#/components/schemas/PoolState'
      required:
        - id
      minProperties: 2
    PoolState:
      description: State of a pool, as reported by io-engine
      type: object
      properties:
        capacity:
          description: size of the pool in bytes
          example: 10737418240
          type: integer
          format: int64
          minimum: 0
        disks:
          description: absolute disk paths claimed by the pool
          type: array
          items:
            example: 'aio:///dev/sda?uuid=caede6dd-5732-4771-8cb6-c32315ed28d3'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        id:
          $ref: '#/components/schemas/PoolId'
        node:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/PoolStatus'
        used:
          description: used bytes from the pool
          type: integer
          format: int64
          minimum: 0
        committed:
          description: accrued size of all replicas contained in this pool
          type: integer
          format: int64
          minimum: 0
      required:
        - capacity
        - disks
        - id
        - node
        - status
        - used
    ReplicaState:
      description: state of the replica
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    ReplicaKind:
      description: Type of replica, example regular or snapshot.
      type: string
      enum:
        - Regular
        - Snapshot
        - SnapshotClone
      default:
        Regular
    Replica:
      description: Replica information
      type: object
      properties:
        node:
          $ref: '#/components/schemas/NodeId'
        pool:
          $ref: '#/components/schemas/PoolId'
        poolUuid:
          $ref: '#/components/schemas/PoolUuid'
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: size of the replica in bytes
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        space:
          $ref: '#/components/schemas/ReplicaSpaceUsage'
        state:
          $ref: '#/components/schemas/ReplicaState'
        thin:
          description: thin provisioning
          example: false
          type: boolean
        uri:
          description: uri usable by nexus to access it
          example: 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:fb04022b-1ca1-4789-bcd4-dacbcb54e23c'
          type: string
        uuid:
          description: uuid of the replica
          type: string
          format: uuid
        allowed-hosts:
          description: NQNs of hosts allowed to connect to this replica
          type: array
          items:
            $ref: '#/components/schemas/HostNqn'
        kind:
          $ref: '#/components/schemas/ReplicaKind'
      required:
        - node
        - pool
        - share
        - size
        - state
        - thin
        - uri
        - uuid
        - kind
    ReplicaSpaceUsage:
      description: |
        Replica space usage information.
        Useful for capacity management, eg: figure out how much of a thin-provisioned replica is allocated.
      type: object
      properties:
        capacity_bytes:
          description: Replica capacity in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        allocated_bytes:
          description: Amount of actually allocated disk space for this replica in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        allocated_bytes_snapshots:
          description: Amount of actually allocated disk space for this replica's snapshots in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
        allocated_bytes_all_snapshots:
          description: |
            Amount of actually allocated disk space for this replica's snapshots and its predecessors in bytes.
            For a restored/cloned replica this includes snapshots from the parent source.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
        cluster_size:
          description: Cluster size in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        clusters:
          description: Total number of clusters.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        allocated_clusters:
          description: Number of actually used clusters.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
      required:
        - capacity_bytes
        - allocated_bytes
        - allocated_bytes_snapshots
        - cluster_size
        - clusters
        - allocated_clusters
    RestJsonError:
      example:
        details: The Pool 'pooloop' was not found
        kind: NotFound
      description: Rest Json Error format
      type: object
      properties:
        details:
          description: detailed error information
          type: string
        message:
          description: last reported error information
          type: string
        kind:
          description: error kind
          type: string
          enum:
            - Timeout
            - Deserialize
            - Internal
            - InvalidArgument
            - DeadlineExceeded
            - NotFound
            - AlreadyExists
            - PermissionDenied
            - ResourceExhausted
            - FailedPrecondition
            - NotShared
            - NotPublished
            - AlreadyPublished
            - AlreadyShared
            - Aborted
            - OutOfRange
            - Unimplemented
            - Unavailable
            - Unauthenticated
            - Unauthorized
            - Conflict
            - FailedPersist
            - Deleting
            - InUse
            - CapacityLimitExceeded
            - NotAcceptable
      required:
        - details
        - kind
        - message
    RestWatch:
      example:
        callback: 'https://api.myserver.com/volume/e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f/callback'
        resource: e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f
      description: Watch Resource in the store
      type: object
      properties:
        callback:
          description: callback used to notify the watch of a change
          type: string
        resource:
          description: id of the resource to watch on
          type: string
      required:
        - callback
        - resource
    Specs:
      description: Specs detailing the requested configuration of the objects.
      type: object
      properties:
        nexuses:
          description: Nexus Specs
          type: array
          items:
            $ref: '#/components/schemas/NexusSpec'
        pools:
          description: Pool Specs
          type: array
          items:
            $ref: '#/components/schemas/PoolSpec'
        replicas:
          description: Replica Specs
          type: array
          items:
            $ref: '#/components/schemas/ReplicaSpec'
        volumes:
          description: Volume Specs
          type: array
          items:
            $ref: '#/components/schemas/VolumeSpec'
      required:
        - nexuses
        - pools
        - replicas
        - volumes
    NexusSpec:
      example:
        children:
          - 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:37d83441-e8ef-4e17-a29e-25169d91cb96'
        managed: false
        node: io-engine-1
        operation: null
        owner: null
        share: none
        size: 80241024
        state: Created
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
      description: User specification of a nexus.
      type: object
      properties:
        children:
          description: List of children.
          type: array
          items:
            type: string
        managed:
          description: Managed by our control plane
          type: boolean
        node:
          description: Node where the nexus should live.
          type: string
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
                - AddChild
                - RemoveChild
                - Shutdown
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        owner:
          description: 'Volume which owns this nexus, if any'
          type: string
          format: uuid
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: Size of the nexus.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        uuid:
          description: Nexus Id
          type: string
          format: uuid
      required:
        - children
        - managed
        - node
        - share
        - size
        - status
        - uuid
    PoolSpec:
      description: User specification of a pool.
      type: object
      properties:
        disks:
          description: absolute disk paths claimed by the pool
          type: array
          items:
            example: '/dev/sda'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        id:
          $ref: '#/components/schemas/PoolId'
        labels:
          description: labels to be set on the pools
          type: object
          additionalProperties:
            type: string
        node:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/SpecStatus'
      required:
        - disks
        - id
        - node
        - status
    ReplicaSpec:
      example:
        managed: false
        operation: null
        owners:
          nexuses:
            - 514ed1c8-7174-49ac-b9cd-ad44ef670a67
          volume: null
        pool: pooloop
        poolUuid: 22ca10d3-4f2b-4b95-9814-9181c025cc1a
        share: none
        size: 80241024
        state: Created
        thin: false
        uuid: 37d83441-e8ef-4e17-a29e-25169d91cb96
      description: User specification of a replica.
      type: object
      properties:
        managed:
          description: Managed by our control plane
          type: boolean
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        owners:
          example:
            nexuses:
              - 514ed1c8-7174-49ac-b9cd-ad44ef670a67
            volume: null
          description: Owner Resource
          type: object
          properties:
            nexuses:
              type: array
              items:
                type: string
                format: uuid
            volume:
              type: string
              format: uuid
          required:
            - nexuses
        pool:
          description: The pool that the replica should live on.
          type: string
        poolUuid:
          $ref: '#/components/schemas/PoolUuid'
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: The size that the replica should be.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        thin:
          description: Thin provisioning.
          type: boolean
        uuid:
          description: uuid of the replica
          type: string
          format: uuid
        kind:
          $ref: '#/components/schemas/ReplicaKind'
      required:
        - managed
        - owners
        - pool
        - share
        - size
        - status
        - thin
        - uuid
    VolumeSpec:
      example:
        num_replicas: 2
        size: 80241024
        state: Created
        target_node: io-engine-1
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
        thin: false
        max_snapshots: 10
      description: User specification of a volume.
      type: object
      properties:
        labels:
          description: Optionally used to store custom volume information
          type: object
          additionalProperties:
            type: string
        num_replicas:
          description: Number of children the volume should have.
          type: integer
          format: uint8
          minimum: 0
          maximum: 255
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
                - SetReplica
                - RemoveUnusedReplica
                - Publish
                - Republish
                - Unpublish
                - CreateSnapshot
                - DestroySnapshot
                - Resize
                - SetVolumeProperty
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        size:
          description: Size that the volume should be.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        target:
          $ref: '#/components/schemas/VolumeTarget'
        uuid:
          description: Volume Id
          type: string
          format: uuid
        topology:
          $ref: '#/components/schemas/Topology'
        policy:
          $ref: '#/components/schemas/VolumePolicy'
        thin:
          description: Thin provisioning flag.
          type: boolean
        as_thin:
          description: Volume converted to thin provisioned.
          type: boolean
        affinity_group:
          $ref: '#/components/schemas/AffinityGroup'
        content_source:
          $ref: '#/components/schemas/VolumeContentSource'
        num_snapshots:
          description: Number of snapshots taken on this volume.
          type: integer
          format: int32
          minimum: 0
        max_snapshots:
          description: Max snapshots to limit per volume.
          type: integer
          format: int32
          minimum: 0
      required:
        - num_paths
        - num_replicas
        - protocol
        - size
        - status
        - uuid
        - policy
        - thin
        - num_snapshots
    VolumeTarget:
      example:
        node: io-engine-1
        protocol: nvmf
      description: Specification of a volume target
      type: object
      properties:
        node:
          description: The node where front-end IO will be sent to
          type: string
        protocol:
          $ref: '#/components/schemas/VolumeShareProtocol'
        frontend_nodes:
          description: |-
            The nodes where the front-end workload resides.
            If the workload moves then the volume must be republished.
          type: array
          items:
            $ref: '#/components/schemas/NodeAccessInfo'
      required:
        - node
    NodeAccessInfo:
      description: Frontend Node access information.
      type: object
      properties:
        name:
          description: The nodename of the node.
          type: string
        nqn:
          description: The Nvme Nqn of the node's initiator.
          type: string
      required:
        - name
        - nqn
    SpecStatus:
      description: Common base state for a resource
      type: string
      enum:
        - Creating
        - Created
        - Deleting
        - Deleted
    VolumeStatus:
      description: current volume status
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
        - Shutdown
    ReplicaSnapshotStatus:
      description: Current ReplicaSnapshot status
      type: string
      enum:
        - Unknown
        - Online
        - Offline
    VolumeShareProtocol:
      description: Volume Share Protocol
      type: string
      enum:
        - nvmf
        - iscsi
    NexusShareProtocol:
      description: Nexus Share Protocol
      type: string
      enum:
        - nvmf
        - iscsi
    ReplicaShareProtocol:
      description: Replica Share Protocol
      type: string
      enum:
        - nvmf
    Protocol:
      description: Common Protocol
      type: string
      enum:
        - none
        - nvmf
        - iscsi
        - nbd
    WatchCallback:
      description: Watch Callbacks
      type: object
      properties:
        uri:
          type: string
      additionalProperties: false
      oneOf:
        - required:
            - uri
    VolumeState:
      example:
        target:
          children:
            - rebuildProgress: null
              state: Online
              uri: 'nvmf://10.1.0.6:8420/nqn.2019-05.com.org:a76adcd6-9df0-47a1-90a5-2d5bf4151572'
          deviceUri: 'nvmf://10.1.0.5:8420/nqn.2019-05.com.org:nexus-a76adcd6-9df0-47a1-90a5-2d5bf4151573'
          protocol: nvmf
          node: io-engine-1
          rebuilds: 0
          share: none
          size: 80241024
          state: Online
          uuid: 61d6afc8-15c6-4127-b0aa-15a570198880
        size: 80241024
        status: Online
        uuid: 4be37dbd-4b60-44f3-b807-08f6693522ac
        replica_topology:
          03f0c3f1-4d3e-44e5-b768-4c50e53f7a34:
            node: io-engine-1
            pool: pool-1
            state: Online
      description: Runtime state of the volume
      type: object
      properties:
        target:
          description: target exposed via a Nexus
          allOf:
            - $ref: '#/components/schemas/Nexus'
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/VolumeStatus'
        uuid:
          description: name of the volume
          type: string
          format: uuid
        replica_topology:
          description: replica topology information
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ReplicaTopology'
        usage:
          $ref: '#/components/schemas/VolumeUsage'
      required:
        - size
        - uuid
        - status
        - replica_topology
    VolumeUsage:
      example:
      description: Volume space usage
      type: object
      properties:
        capacity:
          description: Capacity of the volume in bytes.
          type: integer
          format: int64
          minimum: 0
        allocated:
          description: -|
            Allocated size in bytes, related the largest healthy replica, including snapshots.
            For example, if a volume has 2 replicas, each with 1MiB allocated space, then
            this field will be 1MiB.
          type: integer
          format: int64
          minimum: 0
        allocated_replica:
          description: -|
            Allocated size in bytes, related to the largest healthy replica, excluding snapshots.
          type: integer
          format: int64
          minimum: 0
        allocated_snapshots:
          description: -|
            Allocated size in bytes, related the healthy replica with the highest snapshot usage.
          type: integer
          format: int64
          minimum: 0
        allocated_all_snapshots:
          description: -|
            For a restored/cloned volume, allocated size in bytes, related to the healthy replica with
            largest parent snapshot allocation.
          type: integer
          format: int64
          minimum: 0
        total_allocated:
          description: -|
            Allocated size in bytes, accrued from all the replicas, including snapshots.
            For example, if a volume has 2 replicas, each with 1MiB allocated space, then
            this field will be 2MiB.
          type: integer
          format: int64
          minimum: 0
        total_allocated_replicas:
          description: -|
            Allocated size in bytes, accrued from all the replicas, excluding snapshots.
        total_allocated_snapshots:
          description: -|
            Allocated size in bytes, accrued from all the replica's snapshots.
          type: integer
          format: int64
          minimum: 0
      required:
        - capacity
        - allocated
        - allocated_replica
        - allocated_snapshots
        - allocated_all_snapshots
        - total_allocated
        - total_allocated_replicas
        - total_allocated_snapshots
    Volumes:
      description: |-
        Array of volumes plus the next token for subsequent get requests when using pagination.
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
        next_token:
          type: integer
      required:
        - entries
    Volume:
      description: |-
        Volumes
        Volume information
      type: object
      properties:
        spec:
          $ref: '#/components/schemas/VolumeSpec'
        state:
          $ref: '#/components/schemas/VolumeState'
      required:
        - spec
        - state
    VolumeSnapshots:
      description: |-
        Array of volume snapshots plus the next token for subsequent get requests when using pagination.
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/VolumeSnapshot'
        next_token:
          type: integer
      required:
        - entries
    VolumeSnapshot:
      description: |-
        Volume Snapshot Information.
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/VolumeSnapshotDefinition'
        state:
          $ref: '#/components/schemas/VolumeSnapshotState'
      required:
        - definition
        - state
    VolumeSnapshotDefinition:
      description: |-
        Volume Snapshot Metadata and Spec information.
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/VolumeSnapshotMetadata'
        spec:
          $ref: '#/components/schemas/VolumeSnapshotSpec'
      required:
        - metadata
        - spec
    VolumeSnapshotMetadata:
      description: |-
        Volume Snapshot Metadata information.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SpecStatus'
        timestamp:
          description: Timestamp when snapshot is taken on the storage system.
          type: string
          format: date-time
        size:
          description: |-
            Size in bytes of the snapshot (which is equivalent to its source size).
          type: integer
          format: int64
          minimum: 0
        spec_size:
          description: |-
            Spec size in bytes of the snapshot (which is equivalent to its source spec size).
          type: integer
          format: int64
          minimum: 0
        total_allocated_size:
          description: |-
            Size in bytes taken by the snapshot and its predecessors.
          type: integer
          format: int64
          minimum: 0
        txn_id:
          type: string
        transactions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ReplicaSnapshot'
        num_restores:
          description: Number of restores done from this snapshot.
          type: integer
          format: int32
          minimum: 0
        num_snapshot_replicas:
          description: Number of snapshot replicas for a volumesnapshot.
          type: integer
          format: int32
          minimum: 0
      required:
        - status
        - size
        - spec_size
        - total_allocated_size
        - txn_id
        - transactions
        - num_restores
        - num_snapshot_replicas
    VolumeSnapshotSpec:
      description: |-
        Volume Snapshot Spec information.
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/SnapshotId'
        source_volume:
          $ref: '#/components/schemas/VolumeId'
      required:
        - uuid
        - source_volume
    VolumeSnapshotState:
      description: |-
        Volume Snapshot State information.
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/SnapshotId'
        allocated_size:
          description: |-
            Runtime size in bytes of the snapshot. Equal to the volume allocation at the time of the snapshot creation.
            It may grow larger if any of its predecessors are deleted.
          type: integer
          format: int64
          minimum: 0
        source_volume:
          $ref: '#/components/schemas/VolumeId'
        timestamp:
          description: Timestamp when snapshot is taken on the storage system.
          type: string
          format: date-time
        ready_as_source:
          description: Indicates if a snapshot is ready to be used as a new volume source.
          type: boolean
          default: false
        replica_snapshots:
          description: List of individual ReplicaSnapshotStates.
          type: array
          items:
            $ref: '#/components/schemas/ReplicaSnapshotState'
      required:
        - uuid
        - allocated_size
        - source_volume
        - ready_as_source
        - replica_snapshots
    ReplicaSnapshot:
      description: |-
        Replica Snapshot information.
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/SnapshotId'
        source_id:
          $ref: '#/components/schemas/ReplicaId'
        status:
          $ref: '#/components/schemas/SpecStatus'
      required:
        - uuid
        - source_id
        - status
    ReplicaSnapshotState:
      description: |-
        Replica Snapshot state information.
      type: object
      properties:
        online:
          $ref: '#/components/schemas/OnlineReplicaSnapshotState'
        offline:
          $ref: '#/components/schemas/OfflineReplicaSnapshotState'
      additionalProperties: false
      oneOf:
        - required:
          - online
        - required:
          - offline
    OnlineReplicaSnapshotState:
      description: |-
        Online ReplicaSnapshotState representation.
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/SnapshotId'
        source_id:
          $ref: '#/components/schemas/ReplicaId'
        pool_id:
          $ref: '#/components/schemas/PoolId'
        pool_uuid:
          $ref: '#/components/schemas/PoolUuid'
        timestamp:
          description: Timestamp when the replica snapshot is taken on the storage system.
          type: string
          format: date-time
        size:
          description: Replica snapshot size.
          type: integer
          format: int64
          minimum: 0
        allocated_size:
          description: |-
            Runtime size in bytes of the snapshot. Equal to the volume allocation at the time of the snapshot creation.
            It may grow larger if any of its predecessors are deleted.
          type: integer
          format: int64
          minimum: 0
        predecessor_alloc_size:
          description: Total allocated size of all the snapshot predecessors.
          type: integer
          format: int64
          minimum: 0
      required:
        - uuid
        - source_id
        - pool_uuid
        - pool_id
        - timestamp
        - size
        - allocated_size
        - predecessor_alloc_size
    OfflineReplicaSnapshotState:
      description: |-
        Offline ReplicaSnapshotState representation.
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/SnapshotId'
        source_id:
          $ref: '#/components/schemas/ReplicaId'
        pool_id:
          $ref: '#/components/schemas/PoolId'
        pool_uuid:
          $ref: '#/components/schemas/PoolUuid'
      required:
        - uuid
        - source_id
        - pool_uuid
        - pool_id
    ReplicaTopology:
      description: Volume Replica information.
      type: object
      properties:
        node:
          $ref: '#/components/schemas/NodeId'
        pool:
          $ref: '#/components/schemas/PoolId'
        state:
          $ref: '#/components/schemas/ReplicaState'
        child-status:
          $ref: '#/components/schemas/ChildState'
        child-status-reason:
          $ref: '#/components/schemas/ChildStateReason'
        usage:
          $ref: '#/components/schemas/ReplicaUsage'
        rebuild-progress:
          description: current rebuild progress (%)
          type: integer
          minimum: 0
          maximum: 100
      required:
        - state
    ReplicaUsage:
      description: |
        Replica space usage information.
        Useful for capacity management, eg: figure out how much of a thin-provisioned replica is allocated.
      type: object
      properties:
        capacity:
          description: Replica capacity in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
        allocated:
          description: Amount of actually allocated disk space for this replica in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
        allocated_snapshots:
          description: Amount of actually allocated disk space for this replica's snapshots in bytes.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
        allocated_all_snapshots:
          description: |
            Amount of actually allocated disk space for this replica's snapshots and its predecessors in bytes.
            For a restored/cloned replica this includes snapshots from the parent source.
          example: 80241024
          type: integer
          format: int64
          minimum: 0
          default: 0
      required:
        - capacity
        - allocated
        - allocated_snapshots
        - allocated_all_snapshots
    CordonDrainState:
      description: The drain state
      type: object
      properties:
        cordonedstate:
          $ref: '#/components/schemas/CordonedState'
        drainingstate:
          $ref: '#/components/schemas/DrainState'
        drainedstate:
          $ref: '#/components/schemas/DrainState'
      oneOf:
        - required:
            - cordonedstate
        - required:
            - drainingstate
        - required:
            - drainedstate
    CordonLabels:
      type: array
      items:
        type: string
    DrainLabels:
      type: array
      items:
        type: string
    CordonedState:
      description: The item is cordoned
      type: object
      properties:
        cordonlabels:
          $ref: '#/components/schemas/CordonLabels'
      required:
        - cordonlabels
    DrainState:
      description: The item is draining
      type: object
      properties:
        cordonlabels:
          $ref: '#/components/schemas/CordonLabels'
        drainlabels:
          $ref: '#/components/schemas/DrainLabels'
      required:
        - cordonlabels
        - drainlabels
    RegisterAppNode:
      example:
        endpoint: '10.1.0.5:50055'
        labels:
          org.io/csi-node.nvme-ana: true,
          org.io/zone: us-east-1a
      type: object
      properties:
        endpoint:
          description: |-
            gRPC server endpoint of the app node.
          type: string
          format: url
        labels:
          description: |-
              Labels to be set on the app node.
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - endpoint
    AppNode:
      description: |-
        Represents an application node, which connects to the target node via a share protocol (eg: nvmf).
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AppNodeId'
        spec:
          $ref: '#/components/schemas/AppNodeSpec'
        state:
          $ref: '#/components/schemas/AppNodeState'
      required:
        - id
        - spec
    AppNodeSpec:
      description: |-
        App node attributes.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AppNodeId'
        endpoint:
          description: |-
            gRPC server endpoint of the app node.
          type: string
          format: url
        labels:
          description: |-
              Labels to be set on the app node.
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - endpoint
    AppNodeState:
      description: |-
        Deemed state of the app node.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AppNodeId'
        endpoint:
          description: |-
            gRPC server endpoint of the app node.
          type: string
          format: url
        status:
          description: |-
            Deemed Status of the app node.
          type: string
          enum:
            - Online
            - Offline
      required:
        - id
        - endpoint
        - status
    AppNodes:
      description: |-
        Array of app nodes plus the next token for subsequent get requests when using pagination.
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/AppNode'
        next_token:
          type: integer
      required:
        - entries
  responses:
    ClientError:
      description: Client side error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestJsonError'
    ServerError:
      description: Server side error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestJsonError'
