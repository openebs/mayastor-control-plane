syntax = "proto3";

import "v1/misc/common.proto";
import "v1/nexus/nexus.proto";
import "v1/replica/replica.proto";
import "v1/snapshot/snapshot.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

package v1.volume;

// A Volume
// It has a spec which is the specification provided by the creator
// It has a state if such state is retrieved from io-engine storage nodes
message Volume {
  // Desired specification of the volume
  VolumeDefinition definition = 1;
  // Runtime state of the volume.
  VolumeState state = 2;
}

// Multiple volumes
message Volumes {
  repeated Volume entries = 1;
  // This token allows you to get the next page of entries for
  // `GetVolumes` request. If the number of entries is larger than
  // `max_entries`, use the `next_token` as a value for the
  // `starting_token` field in the next `GetVolumes` request.
  optional uint64 next_token = 3;
}

message VolumeDefinition {
  // Client specification of the volume
  VolumeSpec spec = 1;
  // Control plane related data for the volume
  Metadata metadata = 2;
}

message VolumeSpec {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // Size of the volume in bytes
  uint64 size = 2;
  // Volume labels.
  optional common.StringMapValue labels = 3;
  // Number of children the volume should have.
  uint32 num_replicas = 4;
  // The target where front-end IO will be sent to
  optional VolumeTarget target = 5;
  // volume policy
  VolumePolicy policy = 6;
  // replica placement topology for the volume creation only
  optional Topology topology = 7;
  // Id of the last Nexus used by the volume
  google.protobuf.StringValue last_nexus_id = 8;
  // Flag indicating thin provisioning.
  bool thin = 9;
  // Affinity Group related information.
  optional AffinityGroup affinity_group = 10;
  // Volume Content Source i.e the snapshot or a volume.
  optional VolumeContentSource content_source  = 11;
  // Number of snapshots taken on this volume.
  uint32 num_snapshots = 12;
  // Max snapshots limit per volume.
  optional uint32 max_snapshots = 13;

  // Volume Content Source i.e the snapshot or a volume.
  message VolumeContentSource {
    oneof volume_content_source {
        SnapshotAsSource snapshot = 1;
    }
  }

  // Snapshot as the volume content source.
  message SnapshotAsSource {
    google.protobuf.StringValue snapshot = 1;
    google.protobuf.StringValue snap_source_vol = 2;
  }
}

message Metadata {
  // spec status of the volume
  common.SpecStatus spec_status = 1;
  // Persistent Configuration of the target (current/last)
  TargetConfig target_config = 2;
  // Publish Context of the volume.
  optional common.MapWrapper publish_context = 3;
  // A volume may get temporarily converted into thin-provisioned
  optional bool as_thin = 4;
}

// Affinity Group related information.
message AffinityGroup {
  // Name of the Affinity Group.
  string name = 1;
}

message TargetConfig {
  // Persistent Configuration of the target (current/last)
  VolumeTarget target              = 1;
  // The nvmf configuration
  nexus.NexusNvmfConfig     config = 2;
  // Frontend configuration.
  optional FrontendConfig frontend = 3;
}

message FrontendConfig {
  // List of allowed frontend nodes.
  repeated FrontendNode nodes = 1;
}

message FrontendNode {
  // The node name.
  string name = 1;
  // The node Nvme NQN.
  string nqn  = 2;
}

message VolumeTarget {
  // The node where front-end IO will be sent to
  string node_id = 1;
  // The nexus ID where front-end IO will be sent to
  google.protobuf.StringValue nexus_id = 2;
  // The protocol to use on the target
  optional VolumeShareProtocol protocol = 3;
}

message VolumePolicy {
  bool self_heal = 1;
}

message Topology {
  optional NodeTopology node = 1;
  optional PoolTopology pool = 2;
}

enum VolumeShareProtocol {
  Nvmf = 0;
  Iscsi = 1;
}

message NodeTopology {
  oneof topology {
    LabelledTopology labelled = 1;
    ExplicitNodeTopology explicit = 2;
  }
}

message PoolTopology {
  oneof topology {
    LabelledTopology labelled = 1;
  }
}

message LabelledTopology {
  // exclusive labels
  common.StringMapValue exclusion = 1;
  // inclusive labels
  common.StringMapValue inclusion = 2;
  // affinity labels
  common.StringMapValue affinity = 3;
}

message ExplicitNodeTopology {
  // replicas can only be placed on these nodes
  repeated string allowed_nodes = 1;
  // preferred nodes to place the replicas
  repeated string preferred_nodes = 2;
}

message VolumeState {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // Actual size of the volume as returned by the IoEngine
  uint64 size = 2;
  // current status of the volume
  nexus.NexusStatus status = 3;
  // target nexus that connects to the children
  optional nexus.Nexus target = 4;
  // replica topology information
  map<string, ReplicaTopology> replica_topology = 5;
  // volume usage information
  optional VolumeUsage usage = 6;
}

// Volume usage information
message VolumeUsage {
  // Capacity of the volume in bytes.
  uint64 capacity = 1;
  // Allocated size in bytes, related the largest healthy replica, including snapshots.
  // For example, if a volume has 2 replicas, each with 1MiB allocated space, then
  // this field will be 1MiB.
  uint64 allocated = 2;
  // Allocated size in bytes, accrued from all the replicas, including snapshots.
  // For example, if a volume has 2 replicas, each with 1MiB allocated space, then
  // this field will be 2MiB.
  uint64 total_allocated = 3;
  // Allocated size in bytes, related the largest healthy replica, excluding snapshots.
  uint64 allocated_replica = 4;
  // Allocated size in bytes, related the healthy replica with the highest snapshot usage.
  uint64 allocated_snapshots = 5;
  // For a restored/cloned volume, allocated size in bytes, related to the healthy replica with
  // largest parent snapshot allocation.
  uint64 allocated_all_snapshots = 6;
  // Allocated size in bytes, accrued from all the replicas, excluding snapshots.
  uint64 total_allocated_replicas = 7;
  // Allocated size in bytes, accrued from all the replica's snapshots.
  uint64 total_allocated_snapshots = 8;
}

message ReplicaTopology {
  // id of the io-engine instance
  optional string node = 1;
  // id of the pool
  optional string pool = 2;
  // status of the replica
  replica.ReplicaStatus status = 3;
  // Volume Replica usage information
  optional ReplicaUsage usage = 4;
  // status of the replica as seen by the volume target
  optional nexus.ChildState child_status = 5;
  // reason for the status of the replica as seen by the volume target
  optional nexus.ChildStateReason child_status_reason = 6;
  // current rebuild progress (%)
  optional uint32 rebuild_progress = 7;
}

// Volume Replica usage information
message ReplicaUsage {
  // Capacity of the replica in bytes.
  uint64 capacity = 1;
  // Allocated size in bytes.
  uint64 allocated = 2;
  // Allocated size in bytes from all its snapshots.
  uint64 allocated_snaps = 3;
  // Amount of actually allocated disk space for this replica's snapshots and its predecessors
  // in bytes. For a restored/cloned replica this includes snapshots from the parent source.
  uint64 allocated_all_snaps = 4;
}

message GetVolumesRequest {
  // filter volumes
  oneof filter {
    common.VolumeFilter volume = 1;
  }
  // pagination to allow for multiple requests to get all volumes
  common.Pagination pagination = 2;
  // ignore 404 not found errors
  bool ignore_notfound = 3;
}

// volume creation request
message CreateVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // Size that the volume should be.
  uint64 size = 2;
  // Volume labels.
  optional common.StringMapValue labels = 3;
  // Number of replicas the volume should have.
  uint64 replicas = 4;
  // volume policy
  VolumePolicy policy = 6;
  // replica placement topology for the volume creation only
  optional Topology topology = 7;
  // flag indicating thin provisioning
  bool thin = 8;
  // Affinity Group related information.
  optional AffinityGroup affinity_group = 9;
  // maximum total volume size
  optional uint64 cluster_capacity_limit = 10;
  // Max snapshots limit per volume.
  optional uint32 max_snapshots = 11;
}

// Publish a volume on a node
// Unpublishes the nexus if it's published somewhere else and creates a nexus on the given node.
// Then, share the nexus via the provided share protocol.-
message PublishVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // the node where front-end IO will be sent to
  optional string target_node = 2;
  // share protocol
  optional VolumeShareProtocol share = 3;
  // publish context
  map<string, string> publish_context = 4;
  /// Hosts allowed to access target.
  repeated string frontend_nodes = 5;
}

// Republish a volume on a node by shutting down existing target
message RepublishVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // the node where front-end IO will be sent to
  optional string target_node = 2;
  // share protocol
  VolumeShareProtocol share = 3;
  // Allows reusing of the current target.
  bool reuse_existing = 4;
  // the node where front-end IO will be sent from
  string frontend_node = 5;
  /// Allows reusing the existing target, but prefers a target move.
  bool reuse_existing_fallback = 6;
}

// Resize a volume to the requested size
message ResizeVolumeRequest {
  // uuid of the volume
  string                      uuid = 1;
  // requested new size of the volume
  uint64            requested_size = 2;
  // total aggregated capacity limit for the volume provisioning on the system i.e. the
  // total provisioned size of all volumes can not be greater than this limit
  optional uint64   capacity_limit = 3;
}

// Unpublish a volume from any node where it may be published
// Unshares the children nexuses from the volume and destroys them.
message UnpublishVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // if the node where the nexus lives is offline then we can force unpublish, forgetting about
  // the nexus. Note: this option should be used only when we know the node will not become
  // accessible again and it is safe to do so.
  bool force = 2;
}

// Share Volume request
message ShareVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // share protocol
  VolumeShareProtocol share = 3;
  /// Hosts allowed to access target.
  repeated string frontend_hosts = 4;
}

// Unshare Volume request
message UnshareVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
}

// Set the volume replica count
message SetVolumeReplicaRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
  // replica count
  uint32 replicas = 2;
}

// Set the volume property
message SetVolumePropertyRequest {
  // uuid of the volume
  string uuid = 1;
  // property to set
  VolumeProperty property = 2;
}
// Volume property to set
message VolumeProperty {
  oneof attr {
    MaxSnapshotValue max_snapshots = 1;
  }
}
// Max snapshots limit per volume.
message MaxSnapshotValue {
  uint32 value = 1;
}

// Delete volume
message DestroyVolumeRequest {
  // uuid of the volume
  google.protobuf.StringValue uuid = 1;
}

// Reply type for a CreateVolume request
message CreateVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a GetVolumes request
message GetVolumesReply {
  oneof reply {
    Volumes volumes = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a DestroyVolume request
message DestroyVolumeReply {
  optional common.ReplyError error = 1;
}

// Reply type for a ShareVolume request
message ShareVolumeReply {
  oneof reply {
    string response = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a UnshareVolume request
message UnshareVolumeReply {
  optional common.ReplyError error = 1;
}

// Reply type for a PublishVolume request
message PublishVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a RepublishVolume request
message RepublishVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a ResizeVolume request
message ResizeVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a UnpublishVolume request
message UnpublishVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a SetVolumeReplica request
message SetVolumeReplicaReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a SetVolumeProperty request
message SetVolumePropertyReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

message ProbeRequest {
  // Intentionally empty.
}

message ProbeResponse {
  bool ready = 1;
}

// Destroy Shutdown orphaned Nexus Request
message DestroyShutdownTargetRequest {
  // uuid of the volume
  google.protobuf.StringValue volume_id = 1;
  // List of Targets registered as subsystems for the volume.
  optional RegisteredTargets registered_targets = 2;
}

message RegisteredTargets{
  // Registered targets for the volume.
  repeated string target_list = 1;
}

// Reply type for a DestroyShutdownTargetRequest request
message DestroyShutdownTargetReply {
  optional common.ReplyError error = 1;
}

// AffinityGroup's representation in memory.
message AffinityGroupSpec {
  // Affinity Group id
  string id = 1;
  // List of ids of volumes part of the Affinity Group
  repeated google.protobuf.StringValue volumes = 2;
}

// Take a snapshot of the volume
message CreateSnapshotRequest {
  // uuid of the volume
  string   volume_id = 1;
  // uuid of the snapshot
  string snapshot_id = 2;
}
// Reply type for a SnapshotVolumeRequest request
message CreateSnapshotReply {
  oneof reply {
    VolumeSnapshot snapshot = 1;
    common.ReplyError error = 2;
  }
}

// Delete a snapshot of the volume
message DestroySnapshotRequest {
  // uuid of the volume
  optional string   volume_id = 1;
  // uuid of the snapshot
  string          snapshot_id = 2;
}
// Reply type for a DestroySnapshotRequest request
message DestroySnapshotReply {
  optional common.ReplyError error = 1;
}

message GetSnapshotsRequest {
  // filter snapshots
  oneof filter {
    common.VolumeFilter                  volume = 1;
    common.VolumeSnapshotFilter volume_snapshot = 2;
    common.SnapshotFilter              snapshot = 3;
  }
  // ignore 404 not found errors.
  bool                          ignore_notfound = 4;
  // pagination to allow for multiple requests to get all volumes
  common.Pagination                  pagination = 5;
}
// Reply type for a GetVolumeSnapshots request
message GetSnapshotsReply {
  oneof reply {
    VolumeSnapshots response = 1;
    common.ReplyError  error = 2;
  }
}

message VolumeSnapshots {
  repeated VolumeSnapshot snapshots = 1;
  // This token allows you to get the next page of entries for
  // `GetSnapshots` request. If the number of entries is larger than
  // `max_entries`, use the `next_token` as a value for the
  // `starting_token` field in the next `GetSnapshots` request.
  optional uint64 next_token = 3;
}

message VolumeSnapshot {
  VolumeSnapshotSpec      spec = 1;
  VolumeSnapshotMeta      meta = 2;
  VolumeSnapshotState    state = 3;
}
message VolumeSnapshotState {
  snapshot.SnapshotState                          state = 1;
  // allows us to grow volume snapshot-specific state
  repeated snapshot.VolumeReplicaSnapshotState replicas = 2;
}

message VolumeSnapshotSpec {
  // uuid of the volume
  string   volume_id = 1;
  // uuid of the snapshot
  string snapshot_id = 2;
}
message VolumeSnapshotMeta {
  common.SpecStatus                spec_status = 1;
  // Creation timestamp of the snapshot (set after creation time).
  optional google.protobuf.Timestamp timestamp = 2;
  // Transaction Id that defines this snapshot when it is created.
  string                                txn_id = 3;
  // Replicas which "reference" to this snapshot as its parent, indexed by the transaction
  // id when they were attempted.
  // The "actual" snapshots can be accessed by the key `txn_id`.
  // Failed transactions are any other key.
  map<string, ReplicaSnapshots>   transactions = 4;

  // Size of the snapshot in bytes.
  uint64                                  size = 5;
  // Spec size of the snapshot in bytes.
  uint64                             spec_size = 6;
  // Size taken by the snapshot and its predecessors.
  uint64                  total_allocated_size = 7;
  // Number of restores done from this snapshot.
  uint32                          num_restores = 8;

  message ReplicaSnapshots {
    repeated ReplicaSnapshot         snapshots = 1;
  }
}
message ReplicaSnapshot {
  string                                  uuid = 1;
  common.SpecStatus                spec_status = 2;
  // Creation timestamp of the snapshot (set after creation time).
  optional google.protobuf.Timestamp timestamp = 3;
  // Transaction Id that defines this snapshot when it is created.
  string                                txn_id = 4;
  // The source replica which was snapped to create this snapshot.
  string                             source_id = 5;
}

message CreateSnapshotVolumeRequest {
  // The snapshot to clone.
  optional string       source_snapshot = 1;
  // The generic create volume parameters.
  CreateVolumeRequest            volume = 2;
}
message CreateSnapshotVolumeReply {
  oneof reply {
    Volume volume = 1;
    common.ReplyError error = 2;
  }
}

service VolumeGrpc {
  rpc CreateVolume (CreateVolumeRequest) returns (CreateVolumeReply) {}
  rpc DestroyVolume (DestroyVolumeRequest) returns (DestroyVolumeReply) {}
  rpc DestroyShutdownTarget (DestroyShutdownTargetRequest) returns (DestroyShutdownTargetReply) {}
  rpc GetVolumes (GetVolumesRequest) returns (GetVolumesReply) {}
  rpc PublishVolume (PublishVolumeRequest) returns (PublishVolumeReply) {}
  rpc RepublishVolume (RepublishVolumeRequest) returns (RepublishVolumeReply) {}
  rpc ResizeVolume (ResizeVolumeRequest) returns (ResizeVolumeReply) {}
  rpc UnpublishVolume (UnpublishVolumeRequest) returns (UnpublishVolumeReply) {}
  rpc ShareVolume (ShareVolumeRequest) returns (ShareVolumeReply) {}
  rpc UnshareVolume (UnshareVolumeRequest) returns (UnshareVolumeReply) {}
  rpc SetVolumeReplica (SetVolumeReplicaRequest) returns (SetVolumeReplicaReply) {}
  rpc Probe (ProbeRequest) returns (ProbeResponse) {}
  rpc SetVolumeProperty (SetVolumePropertyRequest) returns (SetVolumePropertyReply) {}
  // Snapshots
  rpc CreateSnapshot (CreateSnapshotRequest) returns (CreateSnapshotReply) {}
  rpc DestroySnapshot (DestroySnapshotRequest) returns (DestroySnapshotReply) {}
  rpc GetSnapshots (GetSnapshotsRequest) returns (GetSnapshotsReply) {}

  // Create a new volume by restoring the snapshot into a new volume by cloning the replica snapshots
  rpc CreateSnapshotVolume (CreateSnapshotVolumeRequest) returns (CreateSnapshotVolumeReply) {}
}
